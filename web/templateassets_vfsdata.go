// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// TemplateAssets contains project assets.
var TemplateAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 23, 5, 28, 23, 555197348, time.UTC),
		},
		"/login.html": &vfsgen۰CompressedFileInfo{
			name:             "login.html",
			modTime:          time.Date(2020, 4, 23, 5, 28, 23, 555074497, time.UTC),
			uncompressedSize: 1341,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xcb\x6e\xdb\x30\x10\x3c\x47\x5f\xb1\xe5\xdd\x25\x72\xa7\x54\x14\xe9\xcb\x80\xdb\x04\xa9\x73\xc8\xc9\xa0\xc4\x8d\x44\x94\x22\x05\x72\xe9\xc6\x0d\xf2\xef\x05\xf5\x40\x64\x57\x68\x8d\xa2\x40\x75\x91\x76\x38\x3b\xb3\x23\x4a\x14\xaf\xde\x5d\x5f\x6d\xef\x6f\xde\xc3\xa7\xed\xe7\x4d\x91\x89\x86\x5a\x03\x46\xda\x3a\x67\x68\x59\x02\x50\xaa\x22\x03\x00\x10\xa4\xc9\x60\xb1\x71\xb5\xb6\x82\x0f\x45\x26\xf8\x40\x10\xa5\x53\x87\x22\x13\x0f\xce\xb7\xd0\x22\x35\x4e\xe5\xac\x73\x81\x18\x54\x46\x86\x90\x33\x93\xfa\x56\x9d\xac\x91\x81\xac\x48\x3b\x9b\x33\x2e\x23\x35\xce\xeb\x1f\xc8\x46\x8f\xe6\x32\x19\xc0\xda\xc2\xd6\xc1\xbd\x8b\x1e\xde\x56\x95\x8b\x96\x04\x6f\x2e\x47\x8e\xb6\x5d\x24\xd8\x4b\x13\x31\x67\x4f\x4f\xf0\xfa\xca\x68\xb4\xb4\x56\xf0\xfc\xcc\xc0\xca\x16\x73\x56\xf5\xd0\x4e\x2b\x06\x74\xe8\x30\x67\x8d\x56\xaa\x4f\xb4\x2c\x71\x8b\x4a\x7b\xac\xe8\xee\x76\x3d\x53\xf1\x23\xba\x8b\x5e\x9f\x2d\x14\x3a\x67\x03\x6e\x0f\x1d\x1e\x29\x0d\xf0\x2e\x89\x9c\x29\xf5\xb5\x72\x47\x1a\x21\xd5\xe7\xf6\x92\xa4\xa3\xde\x54\x2f\xf7\x2a\xbd\x9f\xf6\x28\xed\xde\xaa\x74\x8f\xe3\xd2\xe2\xf2\x1e\x3d\xe9\x4a\x9a\x19\x67\x91\x57\x7b\x17\xbb\x13\x52\x4f\x34\xb2\x44\x73\x44\xed\x11\x56\xdc\x05\xf4\x69\xda\x5f\x5a\x66\x11\x87\x34\x71\x64\x4e\x81\x08\x1f\x5f\x3e\xb4\x5e\xb2\x67\x2f\xb9\xf3\xde\xec\x64\x76\xae\xf4\xfe\x9f\xc7\xb9\x91\x21\x7c\x77\x5e\xfd\x39\x4e\x37\x32\xa7\x38\x2f\xf5\xff\x89\x54\x46\x22\x67\xc7\x61\x42\x2c\x5b\x7d\xfa\x1b\x0f\x0c\x56\x6c\xae\x3f\xae\xbf\x08\x3e\x94\x7f\x3f\xc1\x45\xba\x44\xe8\xa4\x9d\x2d\xd7\x8e\x56\xd3\x9b\x58\x19\x6d\xbf\x4d\xc4\x0b\x21\xa1\xf1\xf8\x90\x33\x7e\x42\x63\xc5\x87\x1e\x80\x43\x3a\x39\x26\xf4\x8d\xe0\x72\xf2\xe0\xc9\xe4\xb7\x83\xce\xca\xf1\x51\x24\x9b\x36\xdd\xc7\x43\x8e\xa7\x53\xb2\xc8\x7e\x06\x00\x00\xff\xff\xf5\xf8\x33\xbe\x3d\x05\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/login.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
