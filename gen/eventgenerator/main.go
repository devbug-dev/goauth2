package main

import (
	"flag"
	"io"
	"log"
	"os"
	"text/template"
	"time"

	"github.com/inklabs/rangedb/pkg/structparser"
)

func main() {
	pkg := flag.String("package", "String", "package")
	id := flag.String("id", "String", "id")
	methodName := flag.String("methodName", "String", "method name")
	aggregateType := flag.String("aggregateType", "", "stream identifier")
	inFilePath := flag.String("inFile", "", "input filename containing structs")
	outFilePath := flag.String("outFile", "", "output filename containing generated struct methods")
	flag.Parse()

	file, err := os.Open(*inFilePath)
	if err != nil {
		log.Fatalf("unable to open (%s): %v", *inFilePath, err)
	}

	eventNames, err := structparser.GetStructNames(file)
	if err != nil {
		log.Fatalf("unable to extract events: %v", err)
	}

	_ = file.Close()

	outFile, err := os.Create(*outFilePath)
	if err != nil {
		log.Fatalf("unable to create events file: %v", err)
	}

	writeEvents(*pkg, *id, *methodName, *aggregateType, eventNames, outFile)

	_ = outFile.Close()
}

func writeEvents(pkg, id, methodName, aggregateType string, eventNames []string, file io.Writer) {
	err := fileTemplate.Execute(file, templateData{
		Timestamp:     time.Now(),
		EventNames:    eventNames,
		MethodName:    methodName,
		AggregateType: aggregateType,
		ID:            id,
		Package:       pkg,
	})
	if err != nil {
		log.Fatalf("unable to write to events file: %v", err)
	}
}

type templateData struct {
	Timestamp     time.Time
	EventNames    []string
	MethodName    string
	AggregateType string
	ID            string
	Package       string
}

var fileTemplate = template.Must(template.New("").Parse(`// Code generated by go generate
// This file was generated at:
// {{ .Timestamp }}
package {{ $.Package }}
{{ range .EventNames }}
func (e {{ . }}) {{ $.MethodName }}() string {
	return "{{ . }}"
}

func (e {{ . }}) AggregateType() string {
	return "{{ $.AggregateType }}"
}

func (e {{ . }}) AggregateID() string {
	return e.{{ $.ID }}
}
{{ end }}`))
